
" Runtime Path: {{{
set runtimepath+=~/.vim/bundle/ervandew/supertab
set runtimepath+=~/.vim/bundle/junegunn/vim-easy-align
set runtimepath+=~/.vim/bundle/vim-scripts/VisIncr
set runtimepath+=~/.vim/bundle/SirVer/ultisnips
set runtimepath+=~/.vim/bundle/tpope/vim-unimpaired
set runtimepath+=~/.vim/bundle/ctrlpvim/ctrlp.vim

set runtimepath^=~/.vim/bundle/godlygeek/tabular
set runtimepath^=~/.vim/bundle/jiangmiao/auto-pairs
set runtimepath^=~/.vim/bundle/preservim/nerdtree
set runtimepath+=~/.vim/bundle/junegunn/limelight.vim
set runtimepath+=~/.vim/bundle/tpope/vim-fugitive
set runtimepath+=~/.vim/bundle/kien/rainbow_parentheses.vim

" }}}

" Plugin: NerdTree {{{

nnoremap <silent> <C-n> :NERDTreeToggle<CR>
nnoremap <leader>nr :NERDTreeRefreshRoot<CR>

let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=1
let NERDTreeWinPos='right'
let NERDTreeMinimalUI=1
let g:NERDTreeWinSize=20

" go to tab if already exist
function! NERDTreeMyOpenInTab(node)
   call a:node.open({'reuse': "all", 'where': 't'})
endfunction
autocmd VimEnter * :call NERDTreeAddKeyMap({'key':'t', 'callback':'NERDTreeMyOpenInTab', 'scope':'FileNode', 'override':1})

" start NERDTree when Vim is started without file arguments.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc()==0 && !exists('s:std_in') | NERDTree | endif

" exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$')==1 && winnr('$')==1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | q | endif

" close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$')==1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | q | endif

" open the existing NERDTree on each new tab.
autocmd BufWinEnter * if getcmdwintype()=='' | silent NERDTreeMirror | endif

" augroup number_toggle
"    autocmd!
"    autocmd BufEnter,FocusGained,InsertLeave * if &ft!="nerdtree" | set relativenumber | endif
"    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
" augroup END

" }}}
" Plugin: Tabular {{{

nnoremap <Leader>t :Tabularize /
vnoremap <Leader>t :Tabularize /

" }}}
" Plugin: Limelight {{{

" toggle limelight
nnoremap gll :Limelight!!<cr>
" config color for unfocuesed part (for gruvbox)
let g:limelight_conceal_ctermfg=241
let g:limelight_conceal_guifg='#665c54'

"  }}}
" Plugin: Fugitive {{{

" select from target (left)
nnoremap gh[ :diffget //2<CR> :diffupdate<CR>
" select from merge (right)
nnoremap gh] :diffget //3<CR> :diffupdate<CR>

" }}}
" Plugin: Rainbow Parentheses {{{

" augroup rainbow_parenthesis
"     autocmd!
"     autocmd VimEnter * RainbowParenthesesToggle
"     autocmd Syntax * RainbowParenthesesLoadRound
"     autocmd Syntax * RainbowParenthesesLoadSquare
"     autocmd Syntax * RainbowParenthesesLoadBraces
" augroup END

" }}}
" Plugin: Ultisnips {{{

" vim with python3 support is required
" a link to ultisnips/ftdetect is required under ./vim/ftdetect
" in runtimepath, path to supertab must come before ultisnips
let g:UltiSnipsSnippetsDir = "~/.vim/my_snippet"
let g:UltiSnipsSnippetDirectories = ["ulti_snippet", "my_snippet"]
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" }}}
" Plugin: Supertab {{{

let g:SuperTabMappingForward = '<tab>' " default
let g:SuperTabMappingBackward = '<s-tab>' " default

" }}}
" Status Line: {{{

" modified from this blog:
"   https://jip.dev/posts/a-simpler-vim-statusline/

function! Status(winnum) abort
    let active = a:winnum == winnr()
    let bufnum = winbufnr(a:winnum)

    function! Color(active, num, content) abort
        if a:active
            " output the content with supplied colorgroup num, e.g. num=1 -> User1
            return '%' . a:num. '*' . a:content . '%*'
        else
            return a:content
        endif
    endfunction
  
    function! GitBranch() abort
"         let br = trim(system("git -C " . expand("%:h") . " branch --show-current 2>/dev/null")) 
        let br = gitbranch#name()
        if strlen(br) > 0
            return ' ' . toupper(br) . ' '
        else
            return ''
        endif
    endfunction

    " column
    "   this might seem a bit complicated but all it amounts to is
    "   a calculation to see how much padding should be used for the
    "   column number, so that it lines up nicely with the line numbers

    "   an expression is needed because expressions are evaluated within
    "   the context of the window for which the statusline is being prepared
    "   this is crucial because the line and virtcol functions otherwise
    "   operate on the currently focused window

    function! Column()
        let vc = virtcol('.')
        let ruler_width = max([strlen(line('$')), (&numberwidth - 1)])
        let column_width = strlen(vc)
        let padding = ruler_width - column_width
        let column = ''

        if padding <= 0
            let column .= vc
        else " + 1 becuase for some reason vim eats one of the spaces
            let column .= repeat(' ', padding + 1) . vc
        endif

        return column . ' '
    endfunction

    let fill = (active) ? '%6*' : ''
    let buftype = getbufvar(bufnum, '&buftype')
    let bufname = bufname(bufnum)

    " handle filetype alternative statusline
    if buftype ==# 'help'
        let helpname = ' ' . fnamemodify(bufname, ':t:r') . ' '
        return Color(active, 5, helpname) . fill
    elseif buftype ==# 'quickfix'
        return Color(active, 5, ' Quickfix ') . fill
    endif

    let percentage = (active) ? ' %P ' : ''
    let branch = (active) ? GitBranch() : ''
    let separator = (strlen(branch)>0) ? ' «' : ''
    let filename = ' %<%f'
    let readonly = getbufvar(bufnum, '&readonly') ? ' ‼' : ''
    let modified = getbufvar(bufnum, '&modified') ? ' +' : ''
    let static_column = ' %3c '
    let dynamic_column = (active) ? '%{Column()}' : ''

    let stat = ''
    let stat .= Color(active, 4, dynamic_column)
    let stat .= Color(active, 2, filename)
    let stat .= Color(active, 6, ' »')
    let stat .= Color(active, 3, readonly)
    let stat .= Color(active, 3, modified)
    let stat .= fill
    let stat .= '%='
    let stat .= Color(active, 6, separator)
    let stat .= Color(active, 1, branch)

    return stat
endfunction

function! s:RefreshStatus()
  for nr in range(1, winnr('$'))
    call setwinvar(nr, '&statusline', '%!Status(' . nr . ')')
  endfor
endfunction

" TODO: after pressing <C-w>o or <C-w>r, current statusline becomes default
augroup status
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * call <SID>RefreshStatus()
augroup END

hi link User1 Comment
hi link User2 Comment
hi link User3 Title 
hi link User4 PmenuSel
hi link User5 PmenuSel
hi link User6 Comment
hi! link StatusLine User3
hi! link StatusLineNC Comment

" }}}

" Quickfix List {{{
function! QuickFixMapping()
    " go to next location and stay in quick fix window
    nnoremap <buffer> j :cnext<cr>zz<c-w>w
    " go to prev location and stay in quick fix window
    nnoremap <buffer> k :cprev<cr>zz<c-w>w
endfunction

augroup quickfix_group
    autocmd!
    autocmd Filetype quickfix call QuickFixMapping()
augroup END

" }}}

