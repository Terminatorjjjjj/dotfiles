set nocompatible " must be first

" Plugged {{{

" :PlugInstall
" :PlugUpdate
call plug#begin('~/.vim/plugged')

Plug 'ervandew/supertab'
Plug 'junegunn/vim-easy-align'
Plug 'vim-scripts/VisIncr'
Plug 'tpope/vim-unimpaired'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'luochen1990/rainbow'
Plug 'itchyny/vim-gitbranch'

Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'

" Plug 'gruvbox-community/gruvbox'
" Plug 'arcticicestudio/nord-vim'
Plug 'sainnhe/everforest'
" Plug 'sainnhe/gruvbox-material'

call plug#end()

set runtimepath+=~/.vim/sv_vim

" }}}
     
" Setting: {{{

syntax enable
syntax on
filetype plugin indent on

set autoindent smartindent
set backspace=2
set expandtab softtabstop=-1 " use shiftwidth
" set tabstop=8
set shiftwidth=4
set ruler
set showcmd
set nowrap
set incsearch hlsearch
" set cursorline
set number relativenumber
set wildmenu
set laststatus=2
" do not redraw screen in the middle of the macro
set lazyredraw
" persistent undo
set undofile
set undodir=~/.vim/undodir
set autochdir
set splitbelow splitright

" enable auto completion menu w/ tab & behave like bash
set wildmode=list:longest,full
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx,*.zip,*.so,*.swp,*/tmp/*,*/.git/*

" make shell not source startup scripts when running shell command in vim
set shellcmdflag=-f\ -c

" remove pipes | that act as separators on splits (there is a space after \)
set fillchars+=vert:\ 

" }}}
" Keymap : {{{

inoremap jj <Esc>
nnoremap <Space> :
vnoremap <Space> :

nnoremap Y y$
" Window cmd
nnoremap gw <C-w>

" horizontal movement w/ easier pressing
nnoremap H ^
nnoremap L $

" Easy increase/decrease
nnoremap + <C-a>
nnoremap - <C-x>

" Move line up/down
nnoremap <c-j> :m .+1<cr>
nnoremap <c-k> :m .-2<cr>
inoremap <c-j> <esc>:m .+1<cr>gi
inoremap <c-k> <esc>:m .-2<cr>gi
vnoremap <c-j> :m '>+1<cr>gv
vnoremap <c-k> :m '<-2<cr>gv

" Keeping search result centered
nnoremap N Nzzzv
nnoremap n nzzzv

" go to prev match history in command line
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>

" close terminal mode (only supported in vim8)
if v:version > 800
    tnoremap <Esc> <C-\><C-n>:q!<CR>
endif

" }}}
" Autocmd: {{{

augroup cursor_toggle
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

augroup number_toggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
augroup END

augroup autocomplete_ignore_case
    autocmd!
    autocmd InsertEnter * set ignorecase
    autocmd InsertLeave * set noignorecase
augroup END

" vertically center document when entering insert mode
augroup vertical_center_insert
    autocmd!
    autocmd InsertEnter * normal zz
augroup END

augroup set_file_type
    autocmd!
    autocmd BufNewFile,BufRead .bashrc*,bashrc,.bash_profile*,bash_profile* setfiletype sh
    autocmd BufNewFile,BufRead *.v,*.vh,*.vs setfiletype systemverilog
    autocmd BufNewFile,BufRead *.sv,*.svh    setfiletype systemverilog
    autocmd BufNewFile,BufRead *.v,*.vh,*.vs set syntax=systemverilog
    autocmd BufNewFile,BufRead *.sv,*.svh    set syntax=systemverilog
augroup END

" filename suffix for 'gf' keymap to search in path
augroup set_suffixesadd
    autocmd!
    autocmd Filetype systemverilog setlocal suffixesadd+=.v,.sv,.h,.svh
augroup END

" }}}
 
" Colorscheme: {{{

if has('termguicolors')
    set termguicolors
endif

let g:everforest_background = 'hard'
let g:everforest_better_performance = 1
" let g:everforest_disable_italic_comment = 1
let g:gruvbox_material_background = 'hard'
let g:gruvbox_material_better_performance = 1
" let g:gruvbox_material_disable_italic_comment = 1
" let g:gruvbox_material_menu_selection_background = 'yellow'

set background=dark
colorscheme everforest

hi CursorLine ctermbg=16 guibg=#000000
hi CursorColumn ctermbg=16 guibg=#000000
hi CursorLineNr ctermbg=16 guibg=#000000

" }}}
" Status Line: {{{

" modified from this blog:
"   https://jip.dev/posts/a-simpler-vim-statusline/
"   https://github.com/blaenk/dots/blob/dfb34f1ad78f5aa25bc486d3c14c9a0ef24094bd/vim/.vimrc#L168

function! Status(winnum) abort
    let active = a:winnum == winnr()
    let bufnum = winbufnr(a:winnum)

    function! Color(active, num, content) abort
        if a:active
            " output the content with supplied colorgroup num, e.g. num=1 -> User1
            return '%' . a:num. '*' . a:content . '%*'
        else
            return a:content
        endif
    endfunction
  
    function! GitBranch() abort
"         let br = trim(system("git -C " . expand("%:h") . " branch --show-current 2>/dev/null")) 
        let br = gitbranch#name()
        if strlen(br) > 0
            return ' ' . br . ' '
        else
            return ''
        endif
    endfunction

    " column
    "   this might seem a bit complicated but all it amounts to is
    "   a calculation to see how much padding should be used for the
    "   column number, so that it lines up nicely with the line numbers

    "   an expression is needed because expressions are evaluated within
    "   the context of the window for which the statusline is being prepared
    "   this is crucial because the line and virtcol functions otherwise
    "   operate on the currently focused window

    function! Column()
        let vc = virtcol('.')
        let ruler_width = max([strlen(line('$')), (&numberwidth - 1)])
        let column_width = strlen(vc)
        let padding = ruler_width - column_width
        let column = ''

        if padding <= 0
            let column .= vc
        else " + 1 becuase for some reason vim eats one of the spaces
            let column .= repeat(' ', padding + 1) . vc
        endif

        return column . ' '
    endfunction

    let fill = (active) ? '%6*' : ''
    let buftype = getbufvar(bufnum, '&buftype')
    let bufname = bufname(bufnum)

    " handle filetype alternative statusline
    if buftype ==# 'help'
        let helpname = ' ' . fnamemodify(bufname, ':t:r') . ' '
        return Color(active, 5, helpname) . fill
    elseif buftype ==# 'quickfix'
        return Color(active, 5, ' Quickfix ') . fill
    endif

    let branch = (active) ? GitBranch() : ''
    let separator = (strlen(branch)>0) ? ' «' : ''
    let filename = ' %<%f'
    let readonly = getbufvar(bufnum, '&readonly') ? ' ‼' : ''
    let modified = getbufvar(bufnum, '&modified') ? ' +' : ''
"     let column = ' %3c '
    let column = (active) ? '%{Column()}' : ''

    let stat = ''
    let stat .= Color(active, 4, column)
    let stat .= Color(active, 2, filename)
    let stat .= Color(active, 6, ' »')
    let stat .= Color(active, 3, readonly)
    let stat .= Color(active, 3, modified)
    let stat .= fill
    let stat .= '%='
    let stat .= Color(active, 6, separator)
    let stat .= Color(active, 1, branch)

    return stat
endfunction

function! s:RefreshStatus()
  for nr in range(1, winnr('$'))
    call setwinvar(nr, '&statusline', '%!Status(' . nr . ')')
  endfor
endfunction

" TODO: after pressing <C-w>o or <C-w>r, current statusline becomes default
augroup status
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * call <SID>RefreshStatus()
augroup END

hi link User1 Comment
hi link User2 Comment
hi link User3 Title 
hi link User4 PmenuSel
hi link User5 PmenuSel
hi link User6 Comment
hi! link StatusLine User3
hi! link StatusLineNC Comment

" }}}
" Code Comment: {{{

augroup get_comment_leader
    autocmd!
    autocmd FileType c,cpp,java,scala,verilog,systemverilog,fotran,stata let b:comment_leader = '// '
    autocmd FileType sh,ruby,python,make,tmux,tcsh,csh,zsh,conf          let b:comment_leader = '# '
    autocmd FileType tex,matlab                                          let b:comment_leader = '% '
    autocmd FileType vim                                                 let b:comment_leader = '" '
    autocmd FileType lua                                                 let b:comment_leader = '-- '
augroup END

" comment and uncomment
noremap <silent> gcc :<C-b>silent <C-e>s/^/<C-r>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> gcu :<C-b>silent <C-e>s/^\v<C-r>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>

" single keymap toggle
function! CommentToggle() range
    if getline(a:firstline) =~ '^\V' . escape(b:comment_leader, '\')
        silent execute a:firstline . ',' . a:lastline . 's/^\V' . escape(b:comment_leader, '\/') . '//e'
    else
        silent execute a:firstline . ',' . a:lastline . 's/^/' . escape(b:comment_leader, '\/') . '/e'
    endif
endfunction
command! -range CT <line1>,<line2>call CommentToggle()|nohlsearch

nnoremap <silent> gci :CT<CR>
vnoremap <silent> gci :CT<CR>

" }}}
" Fold: {{{

" Awesome guide at https://jdhao.github.io/2019/08/16/nvim_config_folding/
function! MyFoldText()
    let line = substitute(getline(v:foldstart), '^ \+\|/\*\|\*/\|"\+\|{\+d\=', '', 'g')
    let folded_line_count = v:foldend - v:foldstart + 1
    return printf('··· %4d  %s ', folded_line_count, line)
endfunction

set foldmethod=marker
set fillchars=fold:\·
set foldtext=MyFoldText()

hi! link Folded Comment

nnoremap ' za
vnoremap ' za

" }}}
" Buffers: {{{

" to change buffer w/o saving current buffer
set hidden
" display buffer list and go to buffer
" nnoremap gb :ls<CR>:b<Space>
" display buffet list and open buffer in right split
" nnoremap gs :ls<CR>:vert sb<Space>
" go to last buffer
nnoremap gb :b#<CR>
nnoremap <C-h> :b#<CR>
nnoremap gs <C-w>w
nnoremap <C-l> <C-w>w

" }}}
         
" Plugin: Easy Align {{{

" start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <plug>(EasyAlign)
" start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <plug>(EasyAlign)

" verilog non-blocking auto align
inoremap <silent> <= <=<Esc>mzvip:EasyAlign/<=/<CR>`z$a<Space>

" customized setting mainly for verilog
" d: for aligning port/signal list with last space before ,;=)
let g:easy_align_delimiters = {
            \ '/': {
            \     'pattern':         '//\+\|/\*\|\*/',
            \     'delimiter_align': 'l',
            \     'ignore_groups':   ['!Comment'] 
            \     },
            \ ':': {
            \     'pattern':       ':',
            \     'left_margin':   1,
            \     'right_margin':  1,
            \     },
            \ '?': {
            \     'pattern':       '?',
            \     'left_margin':   1,
            \     'right_margin':  1,
            \     },
            \ '(': {
            \     'pattern':       '(',
            \     'left_margin':   1,
            \     'right_margin':  0,
            \   },
            \ ')': {
            \     'pattern':       ')',
            \     'left_margin':   0,
            \     'right_margin':  0,
            \   },
            \ 'd': {
            \     'pattern':      ' \ze\S\+\s*[,;=]',
            \     'left_margin':  0,
            \     'right_margin': 0
            \   }
            \ }

" }}}
" Plugin: CtrlP {{{

let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_show_hidden = 0
let g:ctrlp_custom_ignore = {
            \ 'dir': '\v[\/]\.(git)$',
            \ 'file': '\v\.(DS_Store)$',
            \ }
let g:ctrlp_user_command = ['.git', 'git --git-dir=%s/.git ls-files -co --exclude-standard']

" Argument: focus, byfname, s:regexp, prv, item, nxt, marked
"           a:1    a:2      a:3       a:4  a:5   a:6  a:7
function! CtrlPMainStatus(...)
    let prv = '%#Comment# ' . a:4 . ' %*'
    let item = '%#PmenuSel# ' . (a:5 == 'mru files' ? 'mru' : a:5) . ' %*'
    let nxt = '%#Comment# ' . a:6 . ' %*'
    let dir = '%#Comment# ' . fnamemodify(getcwd(), ':~') . ' %*'

    " only output current mode and dir
    return '%#Comment# » %*' . item . '%#Comment# « ' . '%=%<' . dir
endfunction

" Argument: len
"           a:1
function! CtrlPProgressStatus(...)
    let len = '%#Function# ' . a:1 . ' %*'
    let dir = ' %=%<%#LineNr# ' . getcwd() . ' %*'
    return len . dir
endfunction

let g:ctrlp_status_func = {
            \ 'main': 'CtrlPMainStatus',
            \ 'prog': 'CtrlPProgressStatus'
            \ }

nnoremap gp :CtrlPBuffer<CR>

" }}}
" Plugin: Rainbow {{{

let g:rainbow_active = 1

" }}}
" Plugin: SnipMate {{{

let g:snipMate = { 'snippet_version' : 0 }
let g:snipMate.override = 1 " use custom snippet load in after/

" }}}

" modeline
" vim:foldmethod=marker:foldmarker={{{,}}}:foldlevel=0:
