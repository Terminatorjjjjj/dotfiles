set nocompatible " must be first

" ----------------------------------------------------------------------------
"  plugin runtime path
" ----------------------------------------------------------------------------
set runtimepath^=~/.vim/bundle/tabular             " godlygeek/tabular
set runtimepath^=~/.vim/bundle/easy_align          " junegunn/vim-easy-align
set runtimepath^=~/.vim/bundle/rainbow_parentheses " kien/rainbow_parentheses.vim
set runtimepath^=~/.vim/bundle/visincr             " vim-scripts/VisIncr
set runtimepath^=~/.vim/bundle/ultisnips           " SirVer/ultisnips
set runtimepath^=~/.vim/bundle/supertab            " ervandew/supertab
set runtimepath^=~/.vim/bundle/auto_pairs          " jiangmiao/auto-pairs
set runtimepath^=~/.vim/bundle/nerdtree            " preservim/nerdtree

" ----------------------------------------------------------------------------
"  basic setting
" ----------------------------------------------------------------------------
syntax enable
syntax on
filetype on
filetype plugin indent on

set autoindent smartindent
set backspace=2
set expandtab
set tabstop=3
set shiftwidth=3
set cursorline cursorcolumn
set ruler
set showcmd
set nowrap

" ----------------------------------------------------------------------------
"  more setting
" ----------------------------------------------------------------------------
" set mouse=a
set incsearch
set history=50
set formatoptions-=t " disable linebreak word wrap in insert mode
set autochdir
set splitbelow splitright
set foldmethod=indent
set nofoldenable
set hidden

set number relativenumber
augroup number_toggle
   autocmd!
   autocmd BufEnter,FocusGained,InsertLeave * if &ft!="nerdtree" | set relativenumber | endif
   autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

augroup autocomplete_ignore_case
   autocmd!
   autocmd InsertLeave * set noignorecase
   autocmd InsertEnter * set ignorecase
augroup END

set backupdir=.backup/,~/.backup/,/tmp//
set directory=.swp/,~/.swp/,/tmp//
set undodir=.undo/,~/.undo/,/tmp//

" vertically center document when entering insert mode
autocmd InsertEnter * normal zz

" remove trailing white space when buffer write
" autocmd FileType verilog,systemverilog autocmd BufWritePre <buffer> %/\s\+$//e

" ----------------------------------------------------------------------------
"  wildmenu: enable auto completion menu w/ TAB & behave like bash
" ----------------------------------------------------------------------------
set wildmenu
set wildmode=list:longest,full
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

" ----------------------------------------------------------------------------
"  file type
" ----------------------------------------------------------------------------
augroup set_file_type
   autocmd!
   autocmd BufNewFile,BufRead .bashrc*,bashrc,.bash_profile*,bash_profile* set filetype=sh
   autocmd BufNewFile,BufRead *.v,*.vs set filetype=verilog
   autocmd BufNewFile,BufRead *.sv,*.svh set filetype=systemverilog
   autocmd BufNewFile,BufRead *.v,*.vs set syntax=verilog
   autocmd BufNewFile,BufRead *.sv,*.svh set syntax=systemverilog
augroup END

" ----------------------------------------------------------------------------
"  colorscheme
" ----------------------------------------------------------------------------
colorscheme gruvbox
set background=dark " gruvbox
" let g:molokai_original=1
set guifont=Consolos:h16

" ----------------------------------------------------------------------------
"  statusline
" ----------------------------------------------------------------------------
set laststatus=2
set statusline=
set statusline+=%1*\ %y         " file type
set statusline+=%2*\ %.50F      " full file path
set statusline+=%2*\ %r\ %m     " read only; modified
set statusline+=%=
set statusline+=%3*\ %p%%       " percentage
set statusline+=%3*\ [%c:%l/%L] " columen; line; total lines

" ----------------------------------------------------------------------------
"  key binding
" ----------------------------------------------------------------------------
let mapleader='\'

inoremap jj <Esc>
nnoremap <space> :
vnoremap <space> :

augroup comment_group_of_code
   autocmd!
   autocmd FileType c,cpp,java,scala,verilog,systemverilog let b:comment_leader = '// '
   autocmd FileType sh,ruby,python,make,tmux,tcsh          let b:comment_leader = '# '
   autocmd FileType tex,matlab                             let b:comment_leader = '% '
   autocmd FileType vim                                    let b:comment_leader = '" '
augroup END
noremap <silent> <Leader>cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> <Leader>cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>

" move line up/down (add ==, ==gi, gv=gv if want auto align indent)
nnoremap <C-j> :m .+1<CR>
nnoremap <C-k> :m .-2<CR>
inoremap <C-j> <Esc>:m .+1<CR>gi
inoremap <C-k> <Esc>:m .-2<CR>gi
vnoremap <C-j> :m '>+1<CR>gv
vnoremap <C-k> :m '<-2<CR>gv

" insert empty line below/above
nnoremap <Leader>j o<Esc>k
nnoremap <Leader>k O<Esc>j

" close terminal mode
tnoremap <Esc> <C-\><C-n>:q!<CR>

" ----------------------------------------------------------------------------
"  splits
" ----------------------------------------------------------------------------
" move to next split
map <C-l> :wincmd w<CR>
" remove pipes | that act as separators on splits (there is a space after \)
set fillchars+=vert:\ 

" ----------------------------------------------------------------------------
"  buffers
" ----------------------------------------------------------------------------
nnoremap gb :ls<CR>:b<Space>
nnoremap gs :ls<CR>:vert sb<Space>
nnoremap <C-h> :b#<CR>

" ----------------------------------------------------------------------------
"  plugin: nerdtree
" ----------------------------------------------------------------------------
nnoremap <silent> <C-n> :NERDTreeToggle<CR>
nnoremap <leader>nr :NERDTreeRefreshRoot<CR>

let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=1
let NERDTreeWinPos='right'
let NERDTreeMinimalUI=1
let g:NERDTreeWinSize=20

" go to tab if already exist
function NERDTreeMyOpenInTab(node)
   call a:node.open({'reuse': "all", 'where': 't'})
endfunction
autocmd VimEnter * :call NERDTreeAddKeyMap({'key':'t', 'callback':'NERDTreeMyOpenInTab', 'scope':'FileNode', 'override':1})

" start NERDTree when Vim is started without file arguments.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc()==0 && !exists('s:std_in') | NERDTree | endif

" exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$')==1 && winnr('$')==1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | q | endif

" close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$')==1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | q | endif

" open the existing NERDTree on each new tab.
autocmd BufWinEnter * if getcmdwintype()=='' | silent NERDTreeMirror | endif

" ----------------------------------------------------------------------------
"  plugin: rainbow parentheses
" ----------------------------------------------------------------------------
autocmd VimEnter * RainbowParenthesesToggle
autocmd Syntax * RainbowParenthesesLoadRound
autocmd Syntax * RainbowParenthesesLoadSquare
autocmd Syntax * RainbowParenthesesLoadBraces

" ----------------------------------------------------------------------------
"  plugin: supertab
" ----------------------------------------------------------------------------
let g:SuperTabMappingForward='<s-tab>'
let g:SuperTabMappingBackward='<tab>'

" ----------------------------------------------------------------------------
"  plugin: ultisnips
" ----------------------------------------------------------------------------
let g:UltiSnipsSnippetsDir="~/.vim/my_snippet"
let g:UltiSnipsSnippetDirectories=["ulti_snippet", "my_snippet"]
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" ----------------------------------------------------------------------------
"  plugin: easy align
" ----------------------------------------------------------------------------
" start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" ----------------------------------------------------------------------------
"  plugin: tabbular
" ----------------------------------------------------------------------------
nnoremap <Leader>t :Tabularize /
vnoremap <Leader>t :Tabularize /


