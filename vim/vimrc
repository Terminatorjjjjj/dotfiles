set nocompatible " must be first

"  PLUGIN RUNTIME PATH {{{ 
" -----------------------------------------------------------------------------
set runtimepath^=~/.vim/bundle/easy_align          " junegunn/vim-easy-align
set runtimepath^=~/.vim/bundle/rainbow_parentheses " kien/rainbow_parentheses.vim
set runtimepath^=~/.vim/bundle/visincr             " vim-scripts/VisIncr
set runtimepath^=~/.vim/bundle/ultisnips           " SirVer/ultisnips
set runtimepath^=~/.vim/bundle/supertab            " ervandew/supertab
" }}}

"  BASIC SETTING {{{ 
" -----------------------------------------------------------------------------
syntax enable
syntax on
filetype on
filetype plugin indent on

set autoindent smartindent
set backspace=2
set expandtab
set tabstop=3
set shiftwidth=3
set cursorline cursorcolumn
set ruler
set showcmd
set nowrap
" }}}

"  MORE SETTING {{{
" -----------------------------------------------------------------------------
" set mouse=a
set incsearch
set history=50
set formatoptions-=t " disable linebreak word wrap in insert mode
set autochdir
set splitbelow splitright

set number relativenumber
augroup number_toggle
   autocmd!
   autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
   autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

augroup autocomplete_ignore_case
   autocmd!
   autocmd InsertLeave * set noignorecase
   autocmd InsertEnter * set ignorecase
augroup END

set backupdir=.backup/,~/.backup/,/tmp//
set directory=.swp/,~/.swp/,/tmp//
set undodir=.undo/,~/.undo/,/tmp//

" vertically center document when entering insert mode
autocmd InsertEnter * normal zz

" make shell not source startup scripts when running shell command in vim
set shellcmdflag=-f\ -c
" }}}

"  WILDMENU {{{
"  enable auto completion menu w/ tab & behave like bash
" -----------------------------------------------------------------------------
set wildmenu
set wildmode=list:longest,full
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx
" }}}

"  FILE TYPE {{{
" -----------------------------------------------------------------------------
augroup set_file_type
   autocmd!
   autocmd BufNewFile,BufRead .bashrc*,bashrc,.bash_profile*,bash_profile* setfiletype sh
   autocmd BufNewFile,BufRead *.v,*.vh,*.vs setfiletype systemverilog
   autocmd BufNewFile,BufRead *.sv,*.svh setfiletype systemverilog
   autocmd BufNewFile,BufRead *.v,*.vh,*.vs set syntax=systemverilog
   autocmd BufNewFile,BufRead *.sv,*.svh set syntax=systemverilog
augroup END
" }}}

"  COLORSCHEME {{{
" -----------------------------------------------------------------------------
colorscheme gruvbox
set background=dark
" let g:molokai_original=1
set guifont=Consolos:h16
" }}}

"  STATUSLINE {{{
" -----------------------------------------------------------------------------
set laststatus=2
set statusline=
set statusline+=%1*\ %y         " file type
set statusline+=%2*\ %.50F      " full file path
set statusline+=%2*\ %r\ %m     " read only; modified
set statusline+=%=
set statusline+=%3*\ %p%%       " percentage
set statusline+=%3*\ [%c:%l/%L] " columen; line; total lines
" }}}

"  KEY BINDING {{{
" -----------------------------------------------------------------------------
let mapleader='\'

inoremap jj <Esc>
nnoremap <space> :
vnoremap <space> :

augroup comment_group_of_code
   autocmd!
   autocmd FileType c,cpp,java,scala,verilog,systemverilog let b:comment_leader = '// '
   autocmd FileType sh,ruby,python,make,tmux,tcsh          let b:comment_leader = '# '
   autocmd FileType tex,matlab                             let b:comment_leader = '% '
   autocmd FileType vim                                    let b:comment_leader = '" '
augroup END
noremap <silent> gcc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> gcu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>

" move line up/down (add ==, ==gi, gv=gv if want auto align indent)
nnoremap <C-j> :m .+1<CR>
nnoremap <C-k> :m .-2<CR>
inoremap <C-j> <Esc>:m .+1<CR>gi
inoremap <C-k> <Esc>:m .-2<CR>gi
vnoremap <C-j> :m '>+1<CR>gv
vnoremap <C-k> :m '<-2<CR>gv

" add semicolon to the end of current line w/o moving cursor
nnoremap <Leader>; m'A;<Esc>`'

" close terminal mode
tnoremap <Esc> <C-\><C-n>:q!<CR>

" keeping search centered
nnoremap n nzzzv
nnoremap N Nzzzv
" }}}

"  FOLD {{{
" -----------------------------------------------------------------------------
set foldmethod=marker
set foldmarker={{{,}}}
set foldlevel=0
set fillchars=fold:\  " space at the end

nnoremap <expr> <CR> &buftype ==# 'quickfix' ? "\<CR>" : 'za'
" }}}

"  SPLITS {{{
" -----------------------------------------------------------------------------
" move to next split
map <C-l> :wincmd w<CR>
" remove pipes | that act as separators on splits (there is a space after \)
set fillchars+=vert:\ 
" }}}

"  BUFFERS {{{
" -----------------------------------------------------------------------------
set hidden
nnoremap gb :ls<CR>:b<Space>
nnoremap gs :ls<CR>:vert sb<Space>
nnoremap <C-h> :b#<CR>
" }}}

"  QUICKFIX LIST {{{
" -----------------------------------------------------------------------------
function! ToggleQuickFix()
   if empty(filter(getwininfo(), 'v:val.quickfix'))
      copen
   else
      cclose
   endif
endfunction

nnoremap <silent> gqq :call ToggleQuickFix()<CR>

nnoremap gcn :cnext<CR>
nnoremap gcp :cprev<CR>

function! QuickFixMapping()
   " go to next location and stay in quick fix window
   nnoremap <buffer> J :cnext<CR>zz<C-w>w
   " go to prev location and stay in quick fix window
   nnoremap <buffer> K :cprev<CR>zz<C-w>w
endfunction

augroup quickfix_group
   autocmd!
   autocmd filetype qf call QuickFixMapping()
augroup END
" }}}

"  PLUGIN: RAINBOW PARENTHESES {{{
" -----------------------------------------------------------------------------
autocmd VimEnter * RainbowParenthesesToggle
autocmd Syntax * RainbowParenthesesLoadRound
autocmd Syntax * RainbowParenthesesLoadSquare
autocmd Syntax * RainbowParenthesesLoadBraces
" }}}

"  PLUGIN: SUPERTAB {{{
" -----------------------------------------------------------------------------
let g:SuperTabMappingForward='<s-tab>'
let g:SuperTabMappingBackward='<tab>'
" }}}

"  PLUGIN: ULTISNIPS {{{
" -----------------------------------------------------------------------------
let g:UltiSnipsSnippetsDir="~/.vim/my_snippet"
let g:UltiSnipsSnippetDirectories=["ulti_snippet", "my_snippet"]
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" }}}

"  PLUGIN: EASY ALIGN {{{
" -----------------------------------------------------------------------------
" start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" verilog non-blocking auto align
inoremap <silent> <= <=<Esc>mzvip:EasyAlign/<=/<CR>`z$a<Space>

" customized setting mainly for verilog
let g:easy_align_delimiters = {
\ '/': {
\     'pattern':         '//\+\|/\*\|\*/',
\     'delimiter_align': 'l',
\     'ignore_groups':   ['!Comment'] 
\     },
\ ':': {
\     'pattern':       ':',
\     'left_margin':   1,
\     'right_margin':  1,
\     },
\ '?': {
\     'pattern':       '?',
\     'left_margin':   1,
\     'right_margin':  1,
\     },
\ '(': {
\     'pattern':       '(',
\     'left_margin':   1,
\     'right_margin':  0,
\   },
\ ')': {
\     'pattern':       ')',
\     'left_margin':   0,
\     'right_margin':  0,
\   },
\ 'd': {
\     'pattern':      ' \ze\S\+\s*[,;=]',
\     'left_margin':  0,
\     'right_margin': 0
\   }
\ }
" }}}

" modeline
" vim:foldmethod=marker:foldmarker={{{,}}}:foldlevel=0:
