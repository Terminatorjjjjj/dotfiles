set nocompatible " must be first

" runtimepath for plugins
set runtimepath^=~/.vim/bundle/tabular             " godlygeek/tabular
set runtimepath^=~/.vim/bundle/easy_align          " junegunn/vim-easy-align
set runtimepath^=~/.vim/bundle/rainbow_parentheses " kien/rainbow_parentheses.vim
set runtimepath^=~/.vim/bundle/vim_move            " matze/vim-move
set runtimepath^=~/.vim/bundle/visincr             " vim-scripts/VisIncr
set runtimepath^=~/.vim/bundle/ultisnips           " SirVer/ultisnips
set runtimepath^=~/.vim/bundle/supertab            " ervandew/supertab
set runtimepath^=~/.vim/bundle/auto_pairs          " jiangmiao/auto-pairs
set runtimepath^=~/.vim/bundle/nerdtree            " preservim/nerdtree

syntax on
filetype on
filetype plugin indent on

augroup set_file_type
   autocmd!
   autocmd BufNewFile,BufRead .bashrc*,bashrc,.bash_profile*,bash_profile* set filetype=sh
   autocmd BufNewFile,BufRead *.v,*.vs set filetype=verilog
   autocmd BufNewFile,BufRead *.sv,*.svh set filetype=systemverilog
   autocmd BufNewFile,BufRead *.v,*.vs set syntax=verilog
   autocmd BufNewFile,BufRead *.sv,*.svh set syntax=systemverilog
augroup END

" basic settings
set autoindent
set backspace=2
set smartindent
set tabstop=3
set shiftwidth=3     " >> or << for indent/unindent
set expandtab
set mouse=a
set autochdir
set cursorline
set cursorcolumn
set formatoptions-=t " disable linebreak word wrap in insert mode
set history=50
set ruler
set showcmd
set incsearch
set nowrap
set foldmethod=indent 
set nofoldenable

set number relativenumber
augroup numbertoggle
   autocmd!
   autocmd BufEnter,FocusGained,InsertLeave * if &ft!="nerdtree" | set relativenumber | endif
   autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" set indep backup dir
set backupdir=.backup/,~/.backup/,/tmp//
set directory=.swp/,~/.swp/,/tmp//
set undodir=.undo/,~/.undo/,/tmp//

" set colorscheme
syntax enable
colorscheme nord
let g:molokai_original=1
set guifont=Consolos:h16

" statusline setting
set laststatus=2
set statusline=
set statusline+=%1*\ %y         " file type
set statusline+=%2*\ %.50F      " full file path
set statusline+=%2*\ %r\ %m     " read only; modified
set statusline+=%=
set statusline+=%3*\ %p%%       " percentage
set statusline+=%3*\ [%c:%l/%L] " columen; line; total lines

" enable auto completion menu after pressing TAB, and make it behave like bash
set wildmenu
set wildmode=list:longest
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

" set leader in normal mode
let mapleader='\'

" config for nerdtree
nnoremap <silent> <C-n> :NERDTreeToggle <CR>
nnoremap <Leader>nn :NERDTreeFocus<CR>
nnoremap <Leader>nr :NERDTreeRefreshRoot<CR>
let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=1
let NERDTreeWinPos='right'
let NERDTreeMinimalUI=1
let g:NERDTreeWinSize=20
" go to tab if already exist
function NERDTreeMyOpenInTab(node)
   call a:node.open({'reuse': "all", 'where': 't'})
endfunction
autocmd VimEnter * :call NERDTreeAddKeyMap({'key':'t', 'callback':'NERDTreeMyOpenInTab', 'scope':'FileNode', 'override':1})
" start NERDTree when Vim is started without file arguments.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc()==0 && !exists('s:std_in') | NERDTree | endif
" exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$')==1 && winnr('$')==1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | q | endif
" close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$')==1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | q | endif
" open the existing NERDTree on each new tab.
autocmd BufWinEnter * if getcmdwintype()=='' | silent NERDTreeMirror | endif

" config for rainbow parentheses
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" config for vim-move
let g:move_key_modifier='C'

" config for supertab
let g:SuperTabMappingForward='<s-tab>'
let g:SuperTabMappingBackward='<tab>'

" config for ultisnips
let g:UltiSnipsSnippetsDir="~/.vim/my_snippet"
let g:UltiSnipsSnippetDirectories=["ulti_snippet", "my_snippet"]
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" config for east align
" start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

inoremap jj <Esc>
nnoremap <space> :

augroup comment_group_of_code
   autocmd!
   autocmd FileType c,cpp,java,scala,verilog      let b:comment_leader = '// '
   autocmd FileType sh,ruby,python,make,tmux,tcsh let b:comment_leader = '# '
   autocmd FileType tex,matlab                    let b:comment_leader = '% '
   autocmd FileType vim                           let b:comment_leader = '" '
augroup END
noremap <silent> <Leader>cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> <Leader>cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>

" shortcuts for tabularize
nnoremap <Leader>t :Tabularize /
vnoremap <Leader>t :Tabularize /

" line begin/end
nnoremap <Leader>b 0
nnoremap <Leader>e $
