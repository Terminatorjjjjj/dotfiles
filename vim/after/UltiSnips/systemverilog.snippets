extends verilog

# for each loop
snippet forea "for each" b
foreach (${1}) begin
	${0}
end
endsnippet

# do-while statement
snippet dowh
do begin
	${0}
end while (${1});
endsnippet

# cominational always block
snippet alc "always comb" b
always_comb begin
	${0}
end
endsnippet

# sequential always block
snippet alff "always ff" b
always_ff @(posedge ${1:i_clk}) begin
	${0}
end
endsnippet

# latched logic
snippet all "always latch" b
always_latch begin
	${0}
end
endsnippet

# class
snippet cl "class" b
class ${1:class_name};
	// data or class properties
	${0}

	// initialization
	function new();
	endfunction : new
endclase : $1
endsnippet

# typedef structure
snippet types "typdef struct" b
typedf struct {
	${0}
} ${1:name_t};
endsnippet

# program block
snippet prog "program" b
program ${1:program_name} ();
	${0}
endprogram : $1
endsnippet

# interface block
snippet intf "interface" b
interface ${1:interface_name} ();
	// nets
	${0}
	// clocking

	// modports

endinterface : $1
endsnippet

# clocking block
snippet clock "clocking" b
clocking ${1:clocking_name} @(${2:posedge} ${3:clk});
	${0}
endclocking : $1
endsnippet

# covergroup construct
snippet cg "covergroup" b
covergroup ${1:group_name} @(${2:posedge} ${3:clk});
	${0}
endgroup : $1
endsnippet

# package declaration
snippet pkg "package" b
package ${1:package_name};
	${0}
endpackage : $1
endsnippet

# logic dq
snippet rdq "ff dq" b
logic ${1:#:nbit}${2:reg}_q, $2_d;${0}
endsnippet

# vim:foldmethod=marker
